/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// ************************************************************************* //

dimensions          [0 1 -1 0 0 0 0];

internalField       uniform (0 0 0); 


boundaryField
{
   
     walls
    {
   	type            codedFixedValue;
    	value           uniform (0 0 0);
    	name            parabolicProfile;		//redirectType
   
	code
    	#{
            const fvPatch& boundaryPatch = patch(); 
            const vectorField& Cf = boundaryPatch.Cf(); 
            vectorField& field = *this; 

	    scalar t = this->db().time().value();
	    
           	const scalar r = 0.0047625;
		const scalar he = 0;
 		const scalar ke = 0;
 		
 		const scalar tstep = 1e-5;			//time step used in the simulation [In controlDict]
 		const scalar vstep = -20;			//Desired increase in velocity per t [m/s]
 		const scalar vstep_actual = vstep/tstep;	//Transformation for to the right order for really increase with the desired vstep
 		
 		/*--------------------------------*- C++ -*----------------------------------*\
		| Cases	U				                               |
		| 2           	59								|					
		| 4            100                    					|
		| 9            250          							|
		|                                                  				|
		\*---------------------------------------------------------------------------*/
 		const scalar vmax = -59;			//Desired end velocity [m/s]
 		
 		const scalar tmax = (vmax/vstep)*tstep;	//Needed time for developing the flowfield to vmax [for if-condition]
 	
 		
 	    forAll(Cf, faceI)
            {              	                        
        
                    if ( 
				(pow(Cf[faceI].x()-he,2) + pow(Cf[faceI].y()-ke,2)) <= pow(r,2) && Cf[faceI].z() >0
			)
                    {
				if (t < tmax)
				{
                    			field[faceI] = vector(0, 0, vstep_actual*t); 
                    		}                    		
                    		else 
                    		{
                    			field[faceI] = vector(0, 0, vmax);
                    		}   
                    	                  
                    }
	    }

   	#};         

  	codeOptions
  	#{

            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude

   	#};

  	codeInclude
   	#{
      	    #include "fvCFD.H"
      	    #include <cmath>
     	    #include <iostream>
  	#};
    }
    
     outlet
    {
    	type zeroGradient;
    }
    
}





// ************************************************************************* //
