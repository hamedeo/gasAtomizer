/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      sprayCloudProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

rho0            824;                    // Benz: 824 // Fe: 7874

solution
{
    active          true;
    coupled         true;
    transient       yes;
    cellValueSourceCorrection on;
    maxCo           0.3;

    sourceTerms
    {
        schemes
        {
            rho             explicit 1;
            U               explicit 1;
            Yi              explicit 1;
            h               explicit 1;
            radiation       explicit 1;
        }
    }

    interpolationSchemes
    {
        rho             cell;
        U               cellPoint;
        thermo:mu       cell;
        T               cell;
        Cp              cell;
        kappa           cell;
        p               cell;
    }

    integrationSchemes
    {
        U               Euler;
        T               analytical;
    }
}


constantProperties
{
    T0              300;

    // place holders for rho0 and Cp0
    // - reset from liquid properties using T0
    rho0            $rho0; // Benz: 824 // Fe: 7874
    Cp0             825; // Benz:825 // Fe: 451

    constantVolume  true;
}


subModels
{
    particleForces
    {
        mydistortedSphereDrag;                        // Sphere shaped Drop Drag Force as it diforms along breakup over time based on Liu et al. 1993
        gravity;
    }

    // "Fuel" nozzle & droplet modelling

    injectionModels                                 // Modelling Injection of the FUEL into chamber from the Nozzle 
    {
/*
        model1
        {
            type            injectedParticleDistributionInjection;
            SOI             0;
            parcelBasisType mass;
            cloud           eulerianParticleCloud;
            positionOffset  (0 -0.0047625 0.055);
            binWidth        0.1e-3;
            parcelsPerInjector 1;
            // resampleSize    100;                    // optional
            applyDistributionMassTotal no;// yes;

            // Placeholder only when using applyDistributionMassTotal
            massTotal       0;
        }
*/
 /*   
	  model1
        {
            type            injectedParticleInjection;
            SOI             0;
            // massTotal       6.0e-6;
            parcelBasisType fixed;
            nParticle       1;
            massTotal       0; //#eval {$rho0 * 4/3 * pi() * pow(0.00017/2, 3) * $nParticle};
            cloud           eulerianParticleCloud;
            positionOffset  (0 -0.0047625 0.055);
        }
*/
/*
        model1
        {
        
            type            coneNozzleInjection;   
            
        // Times    
            SOI             0;//5e-6; //3e-3;               // injectionStartTime: specifies the time at which the injection process starts.
            duration        5e-5; //2e-4;                   // injectionDuration: specifies the duration of the injection process.

        // Quantities   
            //massTotal will be calculated based on the defined dependenty variables later 
            parcelBasisType mass;		    // Lagrangian particle tracking model that tracks the movement of individual fuel droplets or particles based on their mass.
                                                    //  Parcels based on Opt: -fixed -number -mass
            parcelsPerSecond 5e4;//5e3;             // number of parcels injected into the simulation domain every second
            flowRateProfile constant 1;             // Profile of droplets which There is no physical meaning for the value, it will be normalized

            
            //nParticle        1;                     // number of particls injected into the simulation domain per timestep

        // Size distribution of the injected parcels (Parcel diameters)	
            sizeDistribution                        // size distribution of the particles injected into the flow  
            {
                type        fixedValue;
                    fixedValueDistribution
                    {
                        value   0.00017;
                    }

            }
        

        // Geometry
            // Inner and outer half-cone angles    // angle between the axis of the particle and the inner and outer walls of the injection device
            direction       (0 1 0);                // nozzleAxis: main axis for fuel injection
            position        (0 -0.0047625 0.055);   // nozzlePosition: specifies the position of the nozzle in the simulation domain
            thetaInner      constant 0.0;
            thetaOuter      constant 0.0;

            //inject over a disc:
            injectionMethod point;                   // simulates the injection of a fuel spray from a disc-shaped orifice Opt: -point -disc
            // innerDiameter   0;                      // inner diameter of FUEL Nozzle injector
            // outerDiameter   170e-6;                 // outer diameter of FUEL Nozzle injector
        
        //Parcel Velocity - Calculate the partical initial velocity profile
            // - Inject with constant velocity
            flowType        constantVelocity; 		// the type of velocity profile for the injected particles
            UMag            16; 				    // the magnitude of the initial velocity of the fuel droplets at the nozzle exit. // Liu et al. 1993

        //massTotal 
            massTotal       #eval {$rho0 * 4/3 * pi() * pow(0.00017/$outerDiameter//2, 3) * $duration * $parcelsPerSecond};

          }
*/
          
        model1
        {
        
            type            coneNozzleInjection;   
            
        // Times    
            SOI             0;//5e-6; //3e-3;   				// injectionStartTime: specifies the time at which the injection process starts.
            duration        5e-5; //2e-4;                   // injectionDuration: specifies the duration of the injection process.

        // Quantities   
            //massTotal will be calculated based on the defined dependenty variables later 
            parcelBasisType mass;				    // Lagrangian particle tracking model that tracks the movement of individual fuel droplets or particles based on their mass.
                                                    //  Parcels based on Opt: -fixed -number -mass
            // Since the total number of particles is too many to captured one by one in reality, we imagine a
            //parcel to contain some particels those have the same size, velocity and thermal properties. This is a kind of
            //simplication, the parcelsPerSecond defines the parcel number, the more parcel it has the less particles in each parcel are.
            parcelsPerSecond 5e4;//5e3;                   // number of parcels injected into the simulation domain every second
            flowRateProfile constant 1;             // Profile of droplets which There is no physical meaning for the value, it will be normalized
                                                    //  according to duration time and massTotal to get the mass injection at each time step by interpolation. 
            
            // !IGNORED by OpenFOAM / Wrong Usage??
            //nParticle        1;                     // number of particls injected into the simulation domain per timestep

        // Size distribution of the injected parcels (Parcel diameters)	
            sizeDistribution                        // size distribution of the particles injected into the flow  
            {
                type        fixedValue;
                    fixedValueDistribution
                    {
                        value   0.00017;
                    }
                ///
                type        uniform;                // all the droplets injected will have the same diameter
                                                    // the initial particle size is only controlled by breakup and evaporation process.
                    uniformDistribution             // defines how the uniform distribution range is 
                    {
                        minValue        0.00017;        //  Max. Diameter 
                        maxValue        0.00017;        //  Min. Diameter 
                        // !IGNORED by OpenFOAM / Wrong Usage / Not Defined in the UniformDistribution
                        //The Rosin-Rammler distribution assumes that the particles are spherical and monodisperse, i.e., all particles have the same density.
                        //d               0.00017;      // Rosin-Rammler Mean Diameter
                        //n               1;            // Rosin-Rammler Spread Parameter: n controls the shape of the distribution curve and higher values of n result in a narrower and more sharply peaked distribution
                    }
                ///
            }
        

        // Geometry
            // Inner and outer half-cone angles    // angle between the axis of the particle and the inner and outer walls of the injection device
            direction       (0 1 0);                // nozzleAxis: main axis for fuel injection
            position        (0 -0.0047625 0.055);   // nozzlePosition: specifies the position of the nozzle in the simulation domain
            thetaInner      constant 0.0;
            thetaOuter      constant 0.0;

            //inject over a disc:
            injectionMethod disc;                   // simulates the injection of a fuel spray from a disc-shaped orifice Opt: -point -disc
            innerDiameter   0;                      // inner diameter of FUEL Nozzle injector
            outerDiameter   170e-6;                 // outer diameter of FUEL Nozzle injector
        
        //Parcel Velocity - Calculate the partical initial velocity profile
            // - Inject with constant velocity
            flowType        constantVelocity; 		// the type of velocity profile for the injected particles
            UMag            16; 				    // the magnitude of the initial velocity of the fuel droplets at the nozzle exit. // Liu et al. 1993

            //// flow rate and "Discharge coefficient": ratio of the mass flow rate at the discharge end of the nozzle to that of an ideal nozzle
            // hose velocity are the magnitude and the direction of it are calculated from a random process according to the injector type and cone angle.
            ////   This also requires massTotal, dInner and dOuter
            //flowType        flowRateAndDischarge;   // U = V_dot/(A*Cd)
            //Cd              0.9;                    // determing the intial velocity magnitude if we chose the flowType as flowRateAndDischarge. 

            //// Pressure driven velocity - The pressure difference between injector and ambient pressure
            //flowType        pressureDrivenVelocity;
            //Pinj            10e5;

        //massTotal 
            //rho0    $constantProperties.rho0;
            //!!!  "massTotal =/=0" must be defined 
            //massTotal is the total mass of the injection process which has a dimension of kg, the SOI time and massTotal will combine with 
            //flowRateProfile to get the mass flow rate and calculate how much mass of fuel should be injected at each time step 
            massTotal       #eval {$rho0 * 4/3 * pi() * pow($outerDiameter/2, 3) * $duration * $parcelsPerSecond};                      // Total mass to inject [kg]. --> metal droplet material: // Benz: 2.119691206e-09    // Fe:

          }
                       
    }

    dispersionModel none;

    patchInteractionModel standardWallInteraction;

    heatTransferModel none;//RanzMarshall;

    compositionModel singlePhaseMixture;

    phaseChangeModel none; //liquidEvaporationBoil;

    surfaceFilmModel none;

    atomizationModel none;

    breakupModel     KelvinHelmholtz;   //KelvinHelmholtz;   //TAB;	//ReitzDiwakar; // ReitzKHRT;
    
    stochasticCollisionModel none;

    radiation       off;

    standardWallInteractionCoeffs
    {
        type            escape; //rebound;
    }

    RanzMarshallCoeffs
    {
        BirdCorrection  true;
    }

    singlePhaseMixtureCoeffs
    {
        phases
        (
            liquid
            {
                Fe          0;
                H2O	 	    0;
                Benz		1; // Mass Fraction of the phase
            }
        );
    }

    /*liquidEvaporationBoilCoeffs
    {
        enthalpyTransfer enthalpyDifference;

        activeLiquids    ( H2O );
    }*/

    ReitzDiwakarCoeffs
    {
        solveOscillationEq yes;
        Cbag            6;
        Cb              0.785;
        Cstrip          0.5;
        Cs              10;
    }


    KelvinHelmholtzCoeffs
    {
        solveOscillationEq yes;
        B0              0.61;
        B1              1.73;           //Sqrt(3)
        Ctau            1;
        CRT             0.1;
        msLimit         0.03;
        WeberLimit      6;              //6;
    }

    ReitzKHRTCoeffs
    {
        solveOscillationEq yes;
        B0              0.61;
        B1              1.73;   // sqrt(3)
        Ctau            1;
        CRT             0.1;
        msLimit         0.03;   //0.03
        WeberLimit      6;      // set a limit on We to avoid excessive droplet distortion due to the Kelvin-Helmholtz instability   imperical nimber :6;
    }

    TABCoeffs
    {
    
        solveOscillationEq no;        
        y0              0;
        yDot0           0;           
        Cmu             5;//10;  
        Comega          8;         
        WeCrit          6;
        SMDCalculationMethod 	method1;
    }
}


cloudFunctions
{
    WeberNumber1
    {
        type    WeberNumber;
    }

    ReynoldsNumber1
    {
        type    ReynoldsNumber;
    }

    NusseltNumber1
    {
        type    NusseltNumber;
    }

    HeatTransferCoeff1
    {
        type    HeatTransferCoeff;
    }
}


// ************************************************************************* //

