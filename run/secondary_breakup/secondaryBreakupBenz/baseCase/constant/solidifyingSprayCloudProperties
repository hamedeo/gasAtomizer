/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2106                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      solidifyingSprayCloudProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

rho0            824;                    // Benz: 824 // Fe: 7874

solution
{
    active          true;
    coupled         true;
    transient       yes;
    cellValueSourceCorrection on;
    maxCo           0.3;

    sourceTerms
    {
        schemes
        {
            rho             explicit 1;	// semiImplicit 1; in simplifiedSiwek (also for all other schemes)
            U               explicit 1;
            Yi              explicit 1;
            h               explicit 1;
            radiation       explicit 1;
        }
    }

    interpolationSchemes
    {
        rho             cell;
        U               cellPoint;
        thermo:mu       cell;
        T               cell;
        Cp              cell;
        kappa           cell;
        p               cell;
        // G               cell;	// added
    }

    integrationSchemes
    {
        U               Euler;
        T               analytical;
    }
}


constantProperties
{
    T0              300;

    // place holders for rho0 and Cp0
    // - reset from liquid properties using T0
    rho0            $rho0; 	// Benz: 824 // Fe: 7874
    Cp0             825; 	// Benz:825  // Fe: 451

    // epsilon0        1;	// particle emissivity		// added
    // f0              0.5;	// particle scattering factor	// added

    constantVolume  true;
}


subModels
{
  particleForces
  {
      distortedSphereDrag;                        // Sphere shaped Drop Drag Force as it diforms along breakup over time based on Liu et al. 1993
      gravity;
  }

  injectionModels
  {
	/*
        model1
        {
            type            manualInjection;
            massTotal       #eval {$rho0 * 4/3 * pi() * pow(0.00017/2, 3)};
            parcelBasisType mass;
            SOI             3e-03;
            positionsFile   "sprayCloud1Positions";
            U0              (0 -16 0);
            sizeDistribution
            {
                type        RosinRammler;
                RosinRammlerDistribution
                {
                    minValue        0.00017;
                    maxValue        0.00017;
                    d               1;
                    n               1;
                }
            }
        }
	*/

    model1
    {
        type            coneNozzleInjection;

    // Times
        SOI			3e-3;    // injection start time
        // nP			2;
	duration	#eval { 2 * 2.5e-5}; // injection duration

    // Quantities
        // massTotal will be calculated based on variables later
        parcelBasisType mass;   // -fixed -number -mass
        parcelsPerSecond	4e04;
        flowRateProfile constant 1;  // Normalized profile of droplets
        //nParticle        1;   // Only if parcelBasisType is set to "fixed"

    // Particle-size distribution modle
        sizeDistribution   // size distribution of the injected particles
        {
            type        fixedValue;       //fixedValue; //uniform; //RosinRammler;
            fixedValueDistribution        //<type>Distribution
            {
                value           0.00017;
                // minValue        0.00017;
                // maxValue        0.00017;
                // lambda          1;   // RosinRammler
                // n               1;   // RosinRammler
            }
        }

    // Geometry
        // Inner and outer half-cone angles
        direction       (0 1 0); // nozzleAxis: main axis for fuel injection
        position        (0 -0.0047625 0.055);   // Nozzle position in the domain
        thetaInner      constant 0.0;
        thetaOuter      constant 0.0;

        //inject over a disc:
        injectionMethod point; // -point -disc
        innerDiameter   0; // inner diameter of FUEL Nozzle injector
        outerDiameter   170e-6;  // outer diameter of FUEL Nozzle injector

    //Parcel Velocity - Calculate the partical initial velocity profile
        // - Inject with constant velocity
        flowType        constantVelocity;  // type of velocity profile
        UMag            16;  // fuel droplet initial velocity Liu et al. 1993

    //massTotal
        massTotal       #eval {$rho0 * 4/3 * pi() * pow($outerDiameter/2, 3) * $duration * $parcelsPerSecond * 1}; //Total mass to inject per each parcel (Blob)
  }
}

    dispersionModel none;

    patchInteractionModel standardWallInteraction;

    heatTransferModel none; // RanzMarshall;

    compositionModel singlePhaseMixture; // valid options: (none singlePhaseMixture singleMixtureFraction)

    phaseChangeModel none; // valid options: (liquidEvapFuchsKnudsen liquidEvaporation liquidEvaporationBoil none)

    surfaceFilmModel none;

    atomizationModel none;

    breakupModel	KelvinHelmholtz;   // (ETAB KelvinHelmholtz PilchErdman ReitzDiwakar ReitzKHRT SHF TAB none)

    stochasticCollisionModel none;

    radiation       off;

    standardWallInteractionCoeffs
    {
        type            escape; //rebound;
    }

    RanzMarshallCoeffs
    {
        BirdCorrection  true;
    }

    singlePhaseMixtureCoeffs
    {
	phases
	(
	    liquid
	    {
                Fe              0;
                H2O             0;
                Benz            1; // Mass Fraction of the phase
	    }
	);
    }

    singleMixtureFractionCoeffs	// added
    {
        phases
        (
            gas
            {
                //H2O             1;
            }
            liquid
            {
                Fe		0;
                H2O		0;
                Benz		1; // Mass Fraction of the phase
            }
            solid
            {
                //ash             0;
                //Fe              1;
            }
        YGasTot0        	0;
        YLiquidTot0     	0;
        YSolidTot0      	0;
        );
    }

    liquidEvaporationBoilCoeffs
    {
        enthalpyTransfer enthalpyDifference;

        activeLiquids    ( H2O );
    }

    /*
    liquidEvaporationCoeffs	// added
    {
        enthalpyTransfer enthalpyDifference;

        activeLiquids
        (
            H2O
        );
    }

    constantRateDevolatilisationCoeffs
    {
        volatileData
        (
            (CH4            12)
            (H2             12)
            (CO2            12)
        );
        residualCoeff   0.001;
    }

    COxidationKineticDiffusionLimitedRateCoeffs
    {
        Sb              1;
        C1              5.0E-12;
        C2              0.002;
        E               7.9E+07;
    }
    */

    ReitzDiwakarCoeffs
    {
        solveOscillationEq yes;
        Cbag            6;
        Cb              0.785;
        Cstrip          0.5;
        Cs              10;
    }


    KelvinHelmholtzCoeffs
    {
        solveOscillationEq yes;
        B0              0.61;
        B1              1.73;           //Sqrt(3)
        Ctau            1;
        CRT             0.1;
        msLimit         0.03;
        WeberLimit      6;              //6;
	// TABcoeffs
        y0              0;
        yDot0           0;
        Cmu             5;//10;
        Comega          8;
        WeCrit          6;
        SMDCalculationMethod    method1;

    }

    ReitzKHRTCoeffs
    {
        solveOscillationEq yes;
        B0              0.61;
        B1              1.73;   // sqrt(3)
        Ctau            1;
        CRT             0.1;
        msLimit         0.03;   // 0.03
        WeberLimit      6;      // set a limit on We to avoid excessive droplet distortion due to the Kelvin-Helmholtz instability   imperical number :6;
    }

    TABCoeffs
    {
        // solveOscillationEq no;
        y0              0;
        yDot0           0;
        Cmu             5;	// 10;
        Comega          8;
        WeCrit          6;
        SMDCalculationMethod 	method1;
    }
}


cloudFunctions
{
    WeberNumber1
    {
        type    WeberNumber;
    }

    ReynoldsNumber1
    {
        type    ReynoldsNumber;
    }

    NusseltNumber1
    {
        type    NusseltNumber;
    }

    HeatTransferCoeff1
    {
        type    HeatTransferCoeff;
    }
}


// ************************************************************************* //

